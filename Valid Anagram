#include <iostream>
#include <unordered_map>
using namespace std;

class Solution {
public:
    // ðŸ”´ Approach 1: Brute Force - Using Two Unordered Maps (O(n) Time, O(k) Space)
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;

        unordered_map<char, int> mp1, mp2;
        for (int i = 0; i < s.size(); i++) {
            mp1[s[i]]++;
            mp2[t[i]]++;
        }
        return mp1 == mp2;
    }
};
    // ðŸŸ¢ Approach 2: Optimized - Using a Single Unordered Map (O(n) Time, O(k) Space)
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;
        
        unordered_map<char, int> freq;
        for (int i = 0; i < s.size(); i++) {
            freq[s[i]]++;  // Increase count for string `s`
            freq[t[i]]--;  // Decrease count for string `t`
        }

        // If all values in map are zero, itâ€™s an anagram
        for (auto it : freq) {
            if (it.second != 0) return false;
        }
        return true;
    }
};

