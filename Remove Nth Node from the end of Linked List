/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        // Create a dummy node to handle edge cases (like deleting the head node)
        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        // Two pointers: fast and slow
        ListNode* fast = dummy;
        ListNode* slow = dummy;

        // Move fast ahead by 'n+1' steps so that slow is just before the node to delete
        for (int i = 0; i <= n; i++) {
            fast = fast->next;
        }

        // Move both pointers one step at a time until fast reaches the end
        while (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }

        // Slow is now at the node just before the one we need to remove
        ListNode* delNode = slow->next; // Store the node to be deleted
        slow->next = slow->next->next;  // Skip the nth node from end
        delete(delNode);                // Free memory

        // Return the modified list (dummy->next is the new head)
        return dummy->next;
    }
};
