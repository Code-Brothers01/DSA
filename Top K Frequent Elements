#include <vector>
#include <unordered_map>
#include <queue>

using namespace std;

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> freq; // Hashmap to store frequency of elements
        for (int num : nums) freq[num]++; // Count occurrences of each number

        // Min-Heap to store top k frequent elements
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;

        // Iterate over the frequency map
        for (auto& [num, count] : freq) {
            minHeap.push({count, num}); // Push element into min-heap
            if (minHeap.size() > k) minHeap.pop(); // Remove least frequent element if heap size exceeds k
        }

        vector<int> result;
        while (!minHeap.empty()) {
            result.push_back(minHeap.top().second); // Extract elements from heap
            minHeap.pop();
        }

        return result;
    }
};
