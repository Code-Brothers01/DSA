class Solution {
public:
    // Function to count the number of palindromic substrings
    int countSubstrings(string s) {
        int n = s.size(); // Get the length of the string
        int count = 0;    // To store the number of palindromic substrings

        // Helper lambda function to expand around center
        auto expandAroundCenter = [&](int left, int right) {
            // Expand as long as the characters match
            while (left >= 0 && right < n && s[left] == s[right]) {
                count++;  // Found a palindrome, increase count
                left--;   // Move left pointer outward
                right++;  // Move right pointer outward
            }
        };

        // Iterate over each character to consider it as a center
        for (int i = 0; i < n; i++) {
            // Odd-length palindromes (single-character center)
            expandAroundCenter(i, i);

            // Even-length palindromes (two-character center)
            expandAroundCenter(i, i + 1);
        }

        return count; // Return the total count of palindromic substrings
    }
};
//* Explanation of the Code
//1️⃣ Iterate through each character in the string

//Treat each character as a potential center for odd-length palindromes.
//Treat each adjacent pair of characters as a potential center for even-length palindromes.
//2️⃣ Expand Around Center Function

//Expands outward while the characters at left and right match.
//Each valid expansion increases the count
