class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;  // Stores the unique triplets
        int n = nums.size();

        // Step 1: Sort the array to easily handle duplicates and use two pointers
        sort(nums.begin(), nums.end());

        // Step 2: Iterate through the array
        for (int i = 0; i < n - 2; i++) {
            // Avoid duplicate elements for the first number
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int left = i + 1;  // Second pointer
            int right = n - 1; // Third pointer

            // Step 3: Two-pointer approach to find pairs that sum to -nums[i]
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];

                if (sum == 0) {  
                    // Triplet found
                    result.push_back({nums[i], nums[left], nums[right]});

                    // Move both pointers and avoid duplicates
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;

                    left++;
                    right--;
                }
                else if (sum < 0) {
                    left++;  // Increase sum by moving left pointer forward
                }
                else {
                    right--; // Decrease sum by moving right pointer backward
                }
            }
        }
        return result;  // Return the list of unique triplets
    }
};
