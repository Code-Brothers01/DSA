class Solution {
public:
    // Helper function to validate the BST
    bool validate(TreeNode* root, long minVal, long maxVal) {
        // Base case: An empty tree is a valid BST
        if (!root) return true;

        // Check if the current node's value violates the BST property
        if (root->val <= minVal || root->val >= maxVal) return false;

        // Recursively check left and right subtrees with updated valid range
        return validate(root->left, minVal, root->val) &&  // Left subtree: values must be < root->val
               validate(root->right, root->val, maxVal);   // Right subtree: values must be > root->val
    }

    bool isValidBST(TreeNode* root) {
        // Call the helper function with initial range (-∞, +∞)
        return validate(root, LONG_MIN, LONG_MAX);
    }
};
